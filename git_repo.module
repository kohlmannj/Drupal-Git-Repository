<?php
// $Id$

function git_repo_admin() {
  $form = array();

  $types = node_type_get_names();
  $form['git_repo_content_type'] = array(
    '#options' => $types,
    '#type' => 'checkboxes',
    '#title' => t('Content-Types'),
    '#default_value' => variable_get('git_repo_content_type', array()),
    '#description' => t('Which content type(s) should be linked to a Git Repository?'),
    '#required' => false,
  );

  $form['git_repo_base_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Base Path'),
    '#default_value' => variable_get('git_repo_base_path'),
    '#description' => t('Please provide a (web server writeable) directory, where the git repositories will be created'),
    '#required' => true,
  );

  return system_settings_form($form);
}

function git_repo_menu() {
  $items = array();

  $items['admin/structure/git_repo'] = array(
    'title' => 'Git Repository',
    'description' => 'Configures the Git Repository module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('git_repo_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function _git_repo_path($id) {
  // Get Base Path of Git Repos
  $git_repo_base_path = variable_get('git_repo_base_path');
  if(!$git_repo_base_path) {
    drupal_set_message("Git Repo: \$git_repo_base_path not set");
    return false;
  }

  // Check validity of Base Path
  if(!is_dir($git_repo_base_path)) {
    drupal_set_message("Git Repo: Base Path '$git_repo_base_path' does not exist", "error");
    return false;
  }
  if(!is_writeable($git_repo_base_path)) {
    drupal_set_message("Git Repo: Base Path '$git_repo_base_path' is not writeable", "error");
    return false;
  }

  // Calculate path
  return "$git_repo_base_path/$id";
}

function _git_repo_exists($id) {
  $path = _git_repo_path($id);

  if(!is_dir($path))
    return false;

  return true;
}

function _git_repo_create($id) {
  if(!($path=_git_repo_path($id)))
    return false;

  // Create path
  if(!mkdir($path)) {
    return false;
  }

  // Change to path
  if(!chdir($path)) {
    return false;
  }

  // Create repo
  system("git init --bare");
  system("git update-server-info");

  // Say something
  $t_args=array("%id"=>$id);
  drupal_set_message(t('Git Repository %id has been created.', $t_args));

  return true;
}

function _git_repo_update($id, $node) {
  if(!($path=_git_repo_path($id)))
    return false;

  // Set Repo-Information
  $f=fopen("$path/description", "w");
  fprintf($f, $node->title);
  fclose($f);

  // Create .htaccess-file
  $f=fopen("$path/.htaccess", "w");
  fprintf($f, "AuthType Basic\n");
  fprintf($f, "AuthName \"Group $id\"\n");
  fprintf($f, "AuthBasicProvider external\n");
  fprintf($f, "AuthExternal cg2\n");
  fprintf($f, "GroupExternal cg2\n");
  fprintf($f, "Require group og_$id tutor\n");
  fclose($f);

  // Say something
  $t_args=array("%id"=>$id);
  drupal_set_message(t('Git Repository %id has been updated.', $t_args));
}

function _git_repo_check($node) {
  $git_repo_content_type=variable_get('git_repo_content_type', array());
  // Only when content type is linked to a git repo
  if(!$git_repo_content_type[$node->type]) {
    return;
  }

  // Create repo if it doesn't exist
  if(!_git_repo_exists($node->nid)) {
    _git_repo_create($node->nid);
  }

  // Update settings
  _git_repo_update($node->nid, $node);
}

function git_repo_node_insert($node) {
  _git_repo_check($node);
}

function git_repo_node_update($node) {
  _git_repo_check($node);
}
