<?php
// $Id$

function git_repo_admin() {
  $form = array();

  return system_settings_form($form);
}

function git_repo_menu() {
  $items = array();

  $items['admin/structure/git_repo'] = array(
    'title' => 'Git Repository',
    'description' => 'Configures the Git Repository module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('git_repo_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function _git_repo_create($id, $title) {
  // Calculate path
  $path="/home/cg2/htdocs/git/$id";

  // Create path
  if(!mkdir($path)) {
    return;
  }

  // Change to path
  if(!chdir($path)) {
    return;
  }

  // Create repo
  system("git init --bare");
  system("git update-server-info");

  // Set Repo-Information
  $f=fopen("description", "w");
  fprintf($f, $title);
  fclose($f);

  // Create .htaccess-file
  $f=fopen("$path/.htaccess", "w");
  fprintf($f, "AuthType Basic\n");
  fprintf($f, "AuthName \"Group $id\"\n");
  fprintf($f, "AuthBasicProvider external\n");
  fprintf($f, "AuthExternal cg2\n");
  fprintf($f, "GroupExternal cg2\n");
  fprintf($f, "Require group og_$id tutor\n");
  fclose($f);

  // Say something
  $t_args=array("%id"=>$id);
  drupal_set_message(t('Git Repository %id has been created.', $t_args));
}

function git_repo_node_insert($node) {
  // Only when content type is group
  if($node->type!="group") {
    return;
  }

  // Do the work
  _git_repo_create($node->nid, $node->title);
}
